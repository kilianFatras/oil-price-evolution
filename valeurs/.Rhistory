{
l[i]<-xSmooth[i-1]+(1-(1-alpha)^2)*(x[i]-xSmooth[i-1])
b[i]<-b[i-1]+alpha^2*(x[i]-xSmooth[i-1])
xSmooth[i]<-l[i]+b[i]
}
xSmooth <- c(x[1], head(xSmooth, n-1))
return(xSmooth)
}
alpha <- seq(0.00, 0.95, length = 100)
forecast1<-lapply(alpha, expSmooth, x=X2)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
forecast2<-lapply(alpha, doubleExpSmooth, x=X2)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur<-lapply(forecast,function(x){mean((X2-x)^2)})%>%unlist #correspond à faire transformer une liste en vecteur
plot(alpha_X2, erreur, type = 'l')
o <- which.min(erreur)
points(alpha_X3[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
####TD3 MAP STA 2
rm(list=objects())
library(magrittr)
library(forecast)
library(zoo)
library(xts)
n <- 100
t <- c(1:n)
s <- cos(2*t*pi/10)
eps = rnorm(n,0,1)
X1 = eps
X2 = eps + t/5
X3 = eps + cos(2*t*pi/10) + t/5
plot(X3, type = 'l', ylim = range(X1,X2,X3))
lines(X2-eps, col = 'red')
lines(X3-eps, col = 'blue')
#### Lissage Simple
expSmooth = function(x,alpha)
{
xSmooth <- x
n <- length(x)
for (i in c(2:n))
{
xSmooth[i] = alpha*x[i] + (1-alpha)*xSmooth[i-1]
}
xSmooth <- c(x[1], head(xSmooth, n-1))
return(xSmooth)
}
aplha = 0.9
X1.smooth <- expSmooth(X1, aplha )
plot(X1, type = 'l')
lines(X1.smooth, col = 'red')
mean((X1 - X1.smooth)^2)
##Optimisation alpha
alpha <- seq(0.00, 0.95, length = 100)
forecast<-lapply(alpha, expSmooth, x=X1)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur<-lapply(forecast,function(x){mean((X1-x)^2)})%>%unlist #correspond à faire unlist(lapply...), enfin je pense!
plot(alpha, erreur, type = 'l')
o <- which.min(erreur)
points(alpha[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
######X2
aplha = 0.9
X2.smooth <- expSmooth(X2, aplha )
plot(X2, type = 'l')
lines(X2.smooth, col = 'red')
mean((X2 - X2.smooth)^2)
##Optimisation alpha
alpha_X2 <- seq(0.00, 0.95, length = 100)
forecast<-lapply(alpha_X2, expSmooth, x=X2)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur<-lapply(forecast,function(x){mean((X2-x)^2)})%>%unlist #correspond à faire unlist(lapply...), enfin je pense!
plot(alpha_X2, erreur, type = 'l')
o <- which.min(erreur)
points(alpha_X2[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
######X3
aplha = 0.9
X3.smooth <- expSmooth(X3, aplha )
plot(X3, type = 'l')
lines(X3.smooth, col = 'red')
mean((X3 - X3.smooth)^2)
##Optimisation alpha
alpha_X3 <- seq(0.00, 0.95, length = 100)
forecast<-lapply(alpha_X3, expSmooth, x=X3)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur<-lapply(forecast,function(x){mean((X3-x)^2)})%>%unlist #correspond à faire unlist(lapply...), enfin je pense!
plot(alpha_X3, erreur, type = 'l')
o <- which.min(erreur)
points(alpha_X3[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
### Lissage Double
doubleExpSmooth = function(x, aplha)
{
xSmooth <- x
n = length(x)
l <- array(x[1], dim = n)
b <- array(x[2] - x[1], n)
for(i in c(2:n))
{
l[i]<-xSmooth[i-1]+(1-(1-alpha)^2)*(x[i]-xSmooth[i-1])
b[i]<-b[i-1]+alpha^2*(x[i]-xSmooth[i-1])
xSmooth[i]<-l[i]+b[i]
}
res<-list()
res$smooth<-xsmooth
res$l=l
res$b<-b
return(res)
}
alpha <- seq(0.00, 0.95, length = 100)
forecast1<-lapply(alpha, expSmooth, x=X2)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
forecast2<-lapply(alpha, doubleExpSmooth, x=X2)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur<-lapply(forecast,function(x){mean((X2-x)^2)})%>%unlist #correspond à faire transformer une liste en vecteur
plot(alpha_X2, erreur, type = 'l')
o <- which.min(erreur)
points(alpha_X3[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
####TD3 MAP STA 2
rm(list=objects())
library(magrittr)
library(forecast)
library(zoo)
library(xts)
n <- 100
t <- c(1:n)
s <- cos(2*t*pi/10)
eps = rnorm(n,0,1)
X1 = eps
X2 = eps + t/5
X3 = eps + cos(2*t*pi/10) + t/5
plot(X3, type = 'l', ylim = range(X1,X2,X3))
lines(X2-eps, col = 'red')
lines(X3-eps, col = 'blue')
#### Lissage Simple
expSmooth = function(x,alpha)
{
xSmooth <- x
n <- length(x)
for (i in c(2:n))
{
xSmooth[i] = alpha*x[i] + (1-alpha)*xSmooth[i-1]
}
xSmooth <- c(x[1], head(xSmooth, n-1))
return(xSmooth)
}
aplha = 0.9
X1.smooth <- expSmooth(X1, aplha )
plot(X1, type = 'l')
lines(X1.smooth, col = 'red')
mean((X1 - X1.smooth)^2)
##Optimisation alpha
alpha <- seq(0.00, 0.95, length = 100)
forecast<-lapply(alpha, expSmooth, x=X1)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur<-lapply(forecast,function(x){mean((X1-x)^2)})%>%unlist #correspond à faire unlist(lapply...), enfin je pense!
plot(alpha, erreur, type = 'l')
o <- which.min(erreur)
points(alpha[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
######X2
aplha = 0.9
X2.smooth <- expSmooth(X2, aplha )
plot(X2, type = 'l')
lines(X2.smooth, col = 'red')
mean((X2 - X2.smooth)^2)
##Optimisation alpha
alpha_X2 <- seq(0.00, 0.95, length = 100)
forecast<-lapply(alpha_X2, expSmooth, x=X2)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur<-lapply(forecast,function(x){mean((X2-x)^2)})%>%unlist #correspond à faire unlist(lapply...), enfin je pense!
plot(alpha_X2, erreur, type = 'l')
o <- which.min(erreur)
points(alpha_X2[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
######X3
aplha = 0.9
X3.smooth <- expSmooth(X3, aplha )
plot(X3, type = 'l')
lines(X3.smooth, col = 'red')
mean((X3 - X3.smooth)^2)
##Optimisation alpha
alpha_X3 <- seq(0.00, 0.95, length = 100)
forecast<-lapply(alpha_X3, expSmooth, x=X3)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur<-lapply(forecast,function(x){mean((X3-x)^2)})%>%unlist #correspond à faire unlist(lapply...), enfin je pense!
plot(alpha_X3, erreur, type = 'l')
o <- which.min(erreur)
points(alpha_X3[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
### Lissage Double
doubleExpSmooth = function(x, aplha)
{
xSmooth <- x
n = length(x)
l <- array(x[1], dim = n)
b <- array(x[2] - x[1], n)
for(i in c(2:n))
{
l[i]<-xSmooth[i-1]+(1-(1-alpha)^2)*(x[i]-xSmooth[i-1])
b[i]<-b[i-1]+alpha^2*(x[i]-xSmooth[i-1])
xSmooth[i]<-l[i]+b[i]
}
res<-list()
res$smooth<-xSmooth
res$l=l
res$b<-b
return(res)
}
alpha <- seq(0.00, 0.95, length = 100)
forecast1<-lapply(alpha, expSmooth, x=X2)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
forecast2<-lapply(alpha, doubleExpSmooth, x=X2)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur<-lapply(forecast,function(x){mean((X2-x)^2)})%>%unlist #correspond à faire transformer une liste en vecteur
plot(alpha_X2, erreur, type = 'l')
o <- which.min(erreur)
points(alpha_X3[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
####TD3 MAP STA 2
rm(list=objects())
library(magrittr)
library(forecast)
library(zoo)
library(xts)
n <- 100
t <- c(1:n)
s <- cos(2*t*pi/10)
eps = rnorm(n,0,1)
X1 = eps
X2 = eps + t/5
X3 = eps + cos(2*t*pi/10) + t/5
plot(X3, type = 'l', ylim = range(X1,X2,X3))
lines(X2-eps, col = 'red')
lines(X3-eps, col = 'blue')
#### Lissage Simple
expSmooth = function(x,alpha)
{
xSmooth <- x
n <- length(x)
for (i in c(2:n))
{
xSmooth[i] = alpha*x[i] + (1-alpha)*xSmooth[i-1]
}
xSmooth <- c(x[1], head(xSmooth, n-1))
return(xSmooth)
}
aplha = 0.9
X1.smooth <- expSmooth(X1, aplha )
plot(X1, type = 'l')
lines(X1.smooth, col = 'red')
mean((X1 - X1.smooth)^2)
##Optimisation alpha
alpha <- seq(0.00, 0.95, length = 100)
forecast<-lapply(alpha, expSmooth, x=X1)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur<-lapply(forecast,function(x){mean((X1-x)^2)})%>%unlist #correspond à faire unlist(lapply...), enfin je pense!
plot(alpha, erreur, type = 'l')
o <- which.min(erreur)
points(alpha[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
######X2
aplha = 0.9
X2.smooth <- expSmooth(X2, aplha )
plot(X2, type = 'l')
lines(X2.smooth, col = 'red')
mean((X2 - X2.smooth)^2)
##Optimisation alpha
alpha_X2 <- seq(0.00, 0.95, length = 100)
forecast<-lapply(alpha_X2, expSmooth, x=X2)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur<-lapply(forecast,function(x){mean((X2-x)^2)})%>%unlist #correspond à faire unlist(lapply...), enfin je pense!
plot(alpha_X2, erreur, type = 'l')
o <- which.min(erreur)
points(alpha_X2[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
######X3
aplha = 0.9
X3.smooth <- expSmooth(X3, aplha )
plot(X3, type = 'l')
lines(X3.smooth, col = 'red')
mean((X3 - X3.smooth)^2)
##Optimisation alpha
alpha_X3 <- seq(0.00, 0.95, length = 100)
forecast<-lapply(alpha_X3, expSmooth, x=X3)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur<-lapply(forecast,function(x){mean((X3-x)^2)})%>%unlist #correspond à faire unlist(lapply...), enfin je pense!
plot(alpha_X3, erreur, type = 'l')
o <- which.min(erreur)
points(alpha_X3[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
### Lissage Double
doubleExpSmooth = function(x, aplha)
{
xSmooth <- x
n = length(x)
l <- array(x[1], dim = n)
b <- array(x[2] - x[1], n)
for(i in c(2:n))
{
l[i]<-xSmooth[i-1]+(1-(1-alpha)^2)*(x[i]-xSmooth[i-1])
b[i]<-b[i-1]+alpha^2*(x[i]-xSmooth[i-1])
xSmooth[i]<-l[i]+b[i]
}
res<-list()
res$smooth<-xSmooth
res$l=l
res$b<-b
return(res)
}
alpha <- seq(0.00, 0.95, length = 100)
forecast1<-lapply(alpha, expSmooth, x=X2)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
forecast2<-lapply(alpha, doubleExpSmooth, x=X2)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur1<-lapply(forecast1,function(x){mean((X2-x)^2)})%>%unlist #correspond à faire transformer une liste en vecteur
erreur2<-lapply(forecast2,function(x){mean((X2-x$Smooth)^2)})%>%unlist #correspond à faire transformer une liste en vecteur
plot(alpha_X2, erreur, type = 'l')
o <- which.min(erreur)
points(alpha_X3[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
grpahics.off()
graphics.off()
graphics.off()
plot(alpha, erreur2, type = 'l')
plot(alpha, erreur1, type = 'l')
o <- which.min(erreur)
plot(alpha, erreur2, type = 'l')
lines(alpha, erreur1, type = 'l')
plot(alpha, erreur2, type = 'l')
####TD3 MAP STA 2
rm(list=objects())
library(magrittr)
library(forecast)
library(zoo)
library(xts)
n <- 100
t <- c(1:n)
s <- cos(2*t*pi/10)
eps = rnorm(n,0,1)
X1 = eps
X2 = eps + t/5
X3 = eps + cos(2*t*pi/10) + t/5
plot(X3, type = 'l', ylim = range(X1,X2,X3))
lines(X2-eps, col = 'red')
lines(X3-eps, col = 'blue')
#### Lissage Simple
expSmooth = function(x,alpha)
{
xSmooth <- x
n <- length(x)
for (i in c(2:n))
{
xSmooth[i] = alpha*x[i] + (1-alpha)*xSmooth[i-1]
}
xSmooth <- c(x[1], head(xSmooth, n-1))
return(xSmooth)
}
aplha = 0.9
X1.smooth <- expSmooth(X1, aplha )
plot(X1, type = 'l')
lines(X1.smooth, col = 'red')
mean((X1 - X1.smooth)^2)
##Optimisation alpha
alpha <- seq(0.00, 0.95, length = 100)
forecast<-lapply(alpha, expSmooth, x=X1)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur<-lapply(forecast,function(x){mean((X1-x)^2)})%>%unlist #correspond à faire unlist(lapply...), enfin je pense!
plot(alpha, erreur, type = 'l')
o <- which.min(erreur)
points(alpha[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
######X2
aplha = 0.9
X2.smooth <- expSmooth(X2, aplha )
plot(X2, type = 'l')
lines(X2.smooth, col = 'red')
mean((X2 - X2.smooth)^2)
##Optimisation alpha
alpha_X2 <- seq(0.00, 0.95, length = 100)
forecast<-lapply(alpha_X2, expSmooth, x=X2)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur<-lapply(forecast,function(x){mean((X2-x)^2)})%>%unlist #correspond à faire unlist(lapply...), enfin je pense!
plot(alpha_X2, erreur, type = 'l')
o <- which.min(erreur)
points(alpha_X2[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
######X3
aplha = 0.9
X3.smooth <- expSmooth(X3, aplha )
plot(X3, type = 'l')
lines(X3.smooth, col = 'red')
mean((X3 - X3.smooth)^2)
##Optimisation alpha
alpha_X3 <- seq(0.00, 0.95, length = 100)
forecast<-lapply(alpha_X3, expSmooth, x=X3)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur<-lapply(forecast,function(x){mean((X3-x)^2)})%>%unlist #correspond à faire unlist(lapply...), enfin je pense!
plot(alpha_X3, erreur, type = 'l')
o <- which.min(erreur)
points(alpha_X3[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
### Lissage Double
doubleExpSmooth = function(x, aplha)
{
xSmooth <- x
n = length(x)
l <- array(x[1], dim = n)
b <- array(x[2] - x[1], n)
for(i in c(2:n))
{
l[i]<-xSmooth[i-1]+(1-(1-alpha)^2)*(x[i]-xSmooth[i-1])
b[i]<-b[i-1]+alpha^2*(x[i]-xSmooth[i-1])
xSmooth[i]<-l[i]+b[i]
}
res<-list()
res$smooth<-xSmooth
res$l=l
res$b<-b
return(res)
}
alpha <- seq(0.00, 0.95, length = 100)
forecast1<-lapply(alpha, expSmooth, x=X2)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
forecast2<-lapply(alpha, doubleExpSmooth, x=X2)#calcule la moyenne etc d'une matrice, revoie une liste mais on veut un vecteur
erreur1<-lapply(forecast1,function(x){mean((X2-x)^2)})%>%unlist #correspond à faire transformer une liste en vecteur
erreur2<-lapply(forecast2,function(x){mean((X2-x$Smooth)^2)})%>%unlist #correspond à faire transformer une liste en vecteur
graphics.off()
plot(alpha, erreur2, type = 'l')
lines(alpha, erreur1, col = 'blue')
o <- which.min(erreur)
points(alpha_X3[o], erreur[o] + 0.5, col = 'red', pch = 20, cex = 2)
rm(list=objects())
library(zoo)
library(timeDate)
library(forecast)
library(xts)
library(dygraphs)
library(mgcv)
######Data import
setwd(dir = "/Users/Kilian/Programmation/ENSTA_2A/R_project/MAP_STA2/Projet/oil-price-evolution/Valeurs")
oilPriceValue<-read.table("Valeurs.csv", sep = ';', dec = ",", skip = 1)
head(oilPriceValue)
plot(oilPriceValue)
######Data Frame
dateEnd <- strptime(c("01/01/1990"), "%m/%d/%Y")
dateStart <- strptime(c("12/01/2016"), "%m/%d/%Y")
Date <- seq(dateStart, dateEnd, by = "-1 month")
oilPriceDate<-data.frame(Date, oilPriceValue$V3)
names(oilPriceDate)<-c("Date", "price")
plot(oilPriceDate$Date, oilPriceDate$price, type = 'l')
######Classe ts
oilTs = oilPriceDate$price[324:1]
oilPriceDate.ts <- ts(oilTs, start = 1, frequency = 12) #frequency -> saisonnality time is 1 year
plot(oilPriceDate.ts)
######Classe zoo
oilPriceDate.zoo <- zoo(oilPriceDate$price, order.by = oilPriceDate$Date)
plot(oilPriceDate.zoo)
######Essentials stats
mean(oilPriceDate$price)
sd(oilPriceDate$price)
summary(oilPriceDate$price)
#par(mfrow = c(1, 2))
boxplot(oilPriceDate$price, main = "boîte à moustache")
hist(oilPriceDate$price, main = "histogramme des prix", xlab = "Prix")
######Trend
#mobile mean
mb<-filter(oilPriceDate$price, filter = array(1/50, dim = 50), method = c("convolution"),
sides = 2, circular = FALSE)
mb<-xts(mb, order.by = oilPriceDate$Date)
plot(oilPriceDate$Date, oilPriceDate$price, type = 'l', main = "Moyenne mobile données brutes", xlab = "Date", ylab = "Prix du baril")
lines(mb, col = 'red')
#Differenciation by autocorrelation
par(mfrow = c(1, 2))
Acf(oilPriceDate.ts, na.action = na.omit)
diff.oilPriceDate.ts <- diff(oilPriceDate.ts, lag = 1, differences = 1)
Acf(diff.oilPriceDate.ts, na.action = na.omit)
plot(oilPriceDate.ts)
plot(diff.oilPriceDate.ts, main = "évolution du prix du baril de pétrole lissé brutes", xlab = "Date", ylab = "Prix du baril")
#parametrique trend
time <- c(1:nrow(oilPriceDate))
oilPriceDate$time <- time
reg <- lm(price ~ time + I(time^2) + I(time^3) + I(time^4), data = oilPriceDate)
summary(reg)
#par(mfrow = c(1, 2))
plot(oilPriceDate$Date, oilPriceDate$price, type = "l", xlab = "months",
ylab = "Ind. Price .Oil .In .London (INSEE)", col = "blue")
lines(oilPriceDate$Date, reg$fitted, col = "red", lwd = 2)
plot(oilPriceDate$Date, oilPriceDate$price - reg$fitted, type = "l",
xlab = "months", ylab = "Ind. Prix. - detrend", col = "orangered2")
####Courbe rouge - courbe bleu
#Kernel estimation
noyau <- ksmooth(oilPriceDate$time, oilPriceDate$price, kernel = c("normal"), bandwidth = 10)
#par(mfrow = c(1, 2))
plot(oilPriceDate$Date, oilPriceDate$price, type = "l", xlab = "",
ylab = "Ind. Price. Brent. London (INSEE)", col = "blue")
lines(oilPriceDate$Date, noyau$y, col = "red", lwd = 2)
plot(oilPriceDate$Date, oilPriceDate$price - noyau$y, type = "l",
xlab = "", ylab = "Ind. Prix. - detrend", col = "orangered2")
#local Polynomial estimation
graphics.off()
loc<-loess (price ~ time, dat=oilPriceDate, degree=2, span=0.5) #span sur le pourcentages de valeurs prises dans la fenêtre
loc2<-loess (price ~ time, dat=oilPriceDate, degree=2, span=0.2)
loc3<-loess (price ~ time, dat=oilPriceDate, degree=1, span=0.2)
plot(oilPriceDate$Date,oilPriceDate$price, type='l', main = "tendance par polynômes locaux des données brutes", xlab="months", ylab="Oil barril price(INSEE)", col= "blue")
lines(oilPriceDate$Date, loc$fitted, col='red', lwd=2)
lines(oilPriceDate$Date, loc2$fitted, col='orange', lwd=2)
lines(oilPriceDate$Date, loc3$fitted, col='green', lwd=2)
#semi parametrique estimation trend
n <- 100
const <- rep(1, n)
f1 <- function(x) 1
f2 <- function(x) x
f3 <- function(x) x^2
f4 <- function(x) x^3
x <- seq(0, 1, length = n)
design <- as.matrix(data.frame(const = const, f1 = f1(x), f2 = f2(x),
f3 = f3(x), f4 = f4(x)))
matplot(x, y = design, type = "l", lty = 1, ylab = "", main = "truncated power functions q = 1")
set.seed(150)
coef <- runif(5, -1, 1)
f <- design %*% coef
plot(x, f, type = "l", col = "purple", lwd = 2)
g <- gam(oilPriceDate$price ~ s(time, k = 10), data = oilPriceDate)
plot(oilPriceDate$Date, oilPriceDate$price, type = "l", xlab = "",
ylab = "Ind. Prix. Baril Petrole (INSEE)", col = "blue",
lwd = 2)
lines(oilPriceDate$Date, g$fitted, col = "red", lwd = 2)
#################Seasonality per year
#mobile mean
##saionality 1 year
seasonPart = oilPriceDate$price - loc2$fitted
#la partie saisonnière est la série à laquelle on enlève sa tendance
MA<-filter(seasonPart, filter = array(1/(12), dim = 12), method = c("convolution"),
sides = 2, circular = FALSE)
MA2<-filter(seasonPart, filter = array(1/(12*2), dim = 12*2), method = c("convolution"),
sides = 2, circular = FALSE)
MA3<-filter(seasonPart, filter = array(1/(12*2*5), dim = 12*2*5), method = c("convolution"),
sides = 2, circular = FALSE)
##second saisonality 6 year
plot(oilPriceDate$Date, seasonPart, type = 'l',main = "Saisonnalité des données lissées linéairement", xlab = "Date", ylab = "Prix du baril")
lines(oilPriceDate$Date, MA, col = 'blue')
lines(oilPriceDate$Date, MA2, col = 'orange')
lines(oilPriceDate$Date, MA3, col = 'red')
######differenciation
par(mfrow = c(1, 2))
acf(oilPriceDate.ts)
acf(diff(oilPriceDate.ts, lag = 12, differences = 1))
